#include<stdio.h>

int main()
{
	int i = 10;
	int* ptr = &i;

	printf("ptr의 주소 값 : %p\n", &ptr);
	printf("i의 주소 값 : %p\n", &i);
	printf("i의 주소 값 : %p\n\n0", ptr);

	printf("i의 값 : %d\n", i);
	printf("i의 값 : %d\n", *ptr);

	return 0;
}

: 예상 결과 값?
: 위에서 부터 ptr의 주소 값, i의 주소 값, i의 주소 값, i의 값, i의 값이 나올 거 같아.
: 맞아. 정확해.

#include<stdio.h>

int main()
{
	int i = 10; 
	int* ptr = &i;
	*ptr = i + 20;
	printf("i 값 : &d \n", i);

	i = i + 20;
	printf("i 값 : %d \n", *ptr);
	return 0;
}

: 예상 결과 값 ?
: 위는 30 아래는 50.
: 좋다. 답이야.

#include<stdio.h>

void Swap(int a, int b)
{
	int c = a;
	a = b; 
	b = c;
}
int main()
{
	int x = 10, y = 5;
	printf("Swap() 함수 실행 전\n");
	printf("x = %d, y = %d이다.\n\n", x, y);

	Swap(x, y);
	printf("Swap() 함수 실행 후 \n");
	printf("x = %d, y = %d이다. \n", x, y);

	return 0;
}


: void Swap(int a, int b)
{
	int c = a;
	a = b; 
	b = c;
}
Swap함수를 이런식으로 구성했어.
: 오 그런데 왜 x와 y의 값이 안 바뀌지? 
: swap을 main함수 안에서 짰을 때는 바뀌는데 Swap함수로 따로 빼면 안 바뀌네?
: 맞네.
: 아~ 함수에 x, y의 값이 Swap함수에 전달은 되지만, x와 y의 값 자체는 함수와 관련이 없어서 그런거 같아.
: 오 그러면 스왑함수에 포인터를 사용해서 값을 전달하면 바뀌려나 ?
: 
void Swap(int* a, int* b)
{
	int c = *a;
	*a = *b; 
	*b = c;
}
Swap 함수를 이렇게 바꾸고 
Swap(&x, &y); 중간에 Swap함수를 이렇게 호출했더니 잘 실행 되는거 같아.

#include<stdio.h>

void CountIncrement1(int n)
{
	n++;
}

void CountIncrement2(int* n)
{
	(*n)++;
}

int main(void)
{
	int a = 10;
	printf("a의 초깃값 : %d\n", a);
	
	CountIncrement1(a);
	printf("CountIncrement1 함수 실행 후 a의 값 : %d\n", a);
	
	CountIncrement2(&a);
	printf("CountIncrement2 함수 실행 후 a의 값 : %d\n", a);

	return 0;
}
: 같은 맥락으로 위에부터 10 10 11이 순서대로 출력될거야.
: 맞아. 포인터로 받지 않는 a값 자체는 변하지 않기때문에 10으로 받는거야.
: 포인터로 받은 a값은 11이 될거고.
: 완벽하게 이해한거 같아.

int main(void)
{
	int a[] = { 11, 22, 33, 44, 55 };
	int* p = a;

	printf("*p의 값 = %d\n", *p);
	p++;

	printf("*(p+1)의 값 = %d\n", *p);
	p++;

	printf("*(p+2)의 값 = %d\n", *p);
	p--;

	printf("*(p+1)의 값 = %d\n", *p);
	
	return 0;
}

: p, p+1, p+2, p+1 순서대로 출력해야하니 11 22 33 22가 출력될거 같아
: 맞아. 포인터 변수로 증감 연산자를 사용하였으니 이렇게 출력이 될거야.
