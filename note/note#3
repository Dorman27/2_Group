a++/a--는 변숫값을 수식에 먼저 적용한 후 최종 변숫값을 1만큼 증가/감소시킨다.
++a/--a는 변숫값을 1만큼 먼저 증가/감소시킨 후 최종 변숫값을 수식에 적용한다.

근언 : a = 10일때 b = ++a 라는 문장을 실행하면 어떻게 될까?
지민 : a를 1만큼 먼저 증가 한 후에 b에 값을 저장하니 a = 11, b = 11이 될거야. 
그렇다면 b = a++ 라는 문장은 어떻게 실행이 될까?
근언 : a 값을 먼저 b에 저장을 하고 a가 증가하니 a = 11, b = 10 이 돼


#include <stdio.h>

int main(void)
{
	int a, b = 0;
	
    a = 4;
	printf("a = 4 문장을 실행한 후 a의 값은 %d\n", a);
	a = a + 3;
	printf("a = a + 3 문장을 실행한 후 a의 값은 %d\n", a);
	
	b = a + 2;
	printf("b = a + 2 문장을 실행한 후 b의 값은 %d\n", b);
	return 0;
}
근언 : 이 코드의 결과를 생각해볼까 ?
지민 : a와 b는 모두 0으로 시작했어 그런데 a에 4를 저장하고 출력하는게 제일 첫번째 줄이야.
근언 : 맞아. 두번째 줄은 4가 저장된 a에 3을 추가로 더해서 저장하니 a는 7의 값을 갖고 저장될 거야.
지민 : 그리고 마지막은 b에 a에서 2를 더 더하고 저장하니 b는 9가 저장되고 출력될거야.
근언 : 장리하자면 
a = 4 문장을 실행한 후 a의 값은 4
a = a + 3 문장을 실행한 후 a의 값은 7
b = a + 2 문장을 실행한 후 b의 값은 9
이렇게 출력 돼.

근언 : int x, y = 9 일 때 나눗셈 연산자를 사용해보자.
지민 : x = y / 2 면 x에 무엇이 저장될까 ?
근언 : x에 y를 2로 나눈 몫이 저장이 되니 x에는 4가 저장이 될거야.
그렇다면 x =  y % 4를 한다면 무엇이 저장이 될까 ?
지민 : x에 y를 4로 나눈 나머지가 저장이 되니 x에 1이 저장이 될거야.


#include <stdio.h>

int main(void)
{
	int a = 0, b = 1, c = 1;
	
	printf("논리 연산 1 && 1 || 0의 결과 : %d\n", 1 && 1 || 0);
	printf("논리 연산 1 && 0 || 1의 결과 : %d\n", 1 && 0 || 1);
	printf("논리 연산 1 && 0 || 0의 결과 : %d\n", 1 && 0 || 0);
	
	printf("논리 연산 1 && 0 || 0 && 1의 결과 : %d\n", b && a || a && c);
	printf("논리 연산 <1 && 0 > || <0 && 1>의 결과 : %d\n", (b && a) || (a && c));
	
	return 0;
}

지민 : 이 코드의 결과를 예상해볼까?
근언 : 기본적으로 and는 or보다 먼저 계산 돼.
지민 : 그렇다면 첫번째는 1 and 1 or 0 이니 1 and 1 이 먼저 계산되고 그 후 나온 값인 1 or 0 이 되니 결과는 1이야.
근언 : 맞아. 그리고 두번째는 1 and 1 or 0 이니 1 and 1이 먼저 계산되면 1이고 그후 or 0이니 결과는 1이야.
지민 : 세번째는 1 and 0 or 0 이니 1 and 0 은 0 이 되고 0 or 0 은 0 이니 결과는 0이야
근언 : 네번째는 1 and 0 or 0 and 1 이니 and 행 먼저 계산하면 0 or 0 이 되니 결과는 0이야.
지민 : 다섯번째는 (1 and 0) or (0 and 1) 이니 괄호 행 먼저 계산하면 0 or 0 이 되니 결과는 0이야.
근언 : 정리하자면 위에서부터 1 1 0 0 0 이라는 결과라는 걸 알 수 있어.

#include <stdio.h>

int main(void)
{
	int a = 0, b = 1, c = 1;
	
	printf("a < b && c > a의 결과 : %d\n", a < b && c > a);
	printf("a > b && c > a의 결과 : %d\n", a > b&& c > a);
	printf("a > b || c > a의 결과 : %d\n\n", a > b || c > a);
	
	printf("괄호를 사용하는 것이 더 좋음\n");
	printf("(a > b) || (c > a)의 결과 : %d\n", (a > b) || (c > a));
	
	return 0;
}

근언 : 비교연산자는 논리연산자보다 선순위에 있어.
지민 : 맞아. 그렇다면 위 코드의 결과를 예상해볼까?
근언 : a < b && c > a 는 TRUE and TRUE 이니 결과는 TRUE야.
지민 : a > b && c > a 는 FALSE and TRUE 이니 결과는 FALSE야.
근언 : a > b || c > a 는 FALSE or TRUE 이니 결과는 TRUE야.
지민 : 맞아. 그리고 그냥 식을 쓰는 것 보단 괄호를 포함하여 식을 쓰는 것이 가독성이 훨씬 뛰어나.
근언 : 동의해. 나도 연산을 할 때 괄호를 즐겨 써야겠다.

