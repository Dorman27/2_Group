근언 : a부터 z까지 for문을 사용해서 출력해야해.
지민 : 반복문을 사용해서 문자를 출력해야하니 아스키코드를 사용해보자.
근언 : 좋아. a부터 z까지의 아스키 코드는 97부터 122까지야.
지민 : 그러면 
#include<stdio.h>

int main()
{
	int i;
	for (i = 97; i <= 122; i++) {
		printf("%c", i);
	}
	return 0;
}
코드를 이렇게 구성해봤어
근언 : 그래. a부터 z까지 잘 출력되는 것을 확인했어.


근언 : 다중 for문의 구조를 생각해보자.
지민 : 다중 for문은 for문 안에 for문이 들어가 있는 구조야.
근언 : 내가 생각한 구조는 이렇게 돼.
for(초기화; 조건식; 증감식)
{
    for(초기화; 조건식; 증감식)
    {
        명령문~
    }
}
지민 : 맞아. 먼저 첫 for문에서 첫번째 for문의 변수를 초기화 하고 조건을 확인해서 참이면 
       다음 줄을 실행해.
근언 : 그 다음엔 바로 다음줄인 두번째 for문의 변수를 초기화 하고 조건을 확인해서 참이면 
       그 다음줄인 명령문을 실행할거야.
지민 : 명령문을 실행한 후에는 두번째 for문의 증감식에 따라 두번째 for문의 변수가 변할거야.
근언 : 그 후 두번째 for문의 변수가 조건식에 맞지 않게 되면 첫 번째 for문의 증감식에 따라
       첫번째 for문의 변수가 변할거야.
지민 : 그리고 또 두번째 for문을 실행하고 이걸 계속 반복할거야.
근언 : 맞아. 그러다가 첫번째 for문의 조건식이 맞지 않게 된다면 코드가 종료될거야.



#include <stdio.h>

int main()
{
    int i, j;
    for (i = 1; i <= 3; i++) {
        for (j = 1; j <= 3; j++) {
            printf("%d + %d = %d \n", i, j, i + j);
        }
    }
    return 0;
}
근언 : 예제 6-6을 풀어봤어.

지민 : 예제 6-7을 풀어보자.
근언 : 별을 하나 찍고 그 다음 두개 찍고 이런식으로 반복이 되니
       다중 for문 중 안쪽에 들어가 있는 for문을 바깥쪽 for문 만큼 별을 출력하게 만드는건 어때?
지민 : 그리고 별을 찍고 바깥쪽 for문의 증감식이 적용되기 전에 줄바꿈을 하는걸로 하자.
근언 : 좋아. 그럼 코드를 짜보면
#include <stdio.h>

int main()
{
	int i, j;
	for (i = 0; i < 5; i++) {
		for (j = 0; j <= i; j++) {
			printf("*");
		}
		printf("\n");
	}
	return 0;
}
     이렇게 코드를 구성하면 문제에 맞게 출력되는 것을 알 수 있어.

#include <stdio.h>

int main(void)
{
    int i, j, count = 0;

    for (i = 2; i <= 100; ++i)
    {
        for (j = 2; j < i; ++j)
        {
            if (i % j == 0)
                break;
        }

        if (j == i)
        {
            count++;
            printf("%d %s", i, count % 5 ? "" : "\n");
        }
    }

    return 0;
}

지민 : 위에는 소수만 출력하는 코드야.
근언 : 어떤식으로 작동하는지 분석해볼까 ?
지민 : 먼저 소수는 자신과 1으로 밖에 나눌 수 없는 수야.
근언 : 그럼 중첩 for문을 사용해서 i와 j가 서로 나눠서 나머지가 0인 수를 제외하고 출력하면 되겠다.
지민 : 첫번째 for문은 2부터 100까지로 정하고 두번째 for문은 2부터 i까지 숫자를 나타내서 i%j를 하면 되겠다.
근언 : 맞아. 그렇다면 그 아래있는 if문은 뭘까 ?
지민 : 그건 i를 몇개 출력했는지 count가 세서 count가 5개가 됐을 때 줄 내림을 해주는 코드야.
근언 : 오 그럼 좀 더 깔끔하게 정리돼서 출력하겠다.


근언 : continue문에 대해 알아볼까 ?
지민 : continue문은 쉽게 말하면 스킵해라! 라고 할 수 있어.
근언 : 맞아 continue앞에 있는 조건식이 만족되면 해당하는 반복문은 스킵하는거지.
#include <stdio.h>

int main(void)
{
    int i, sum = 0;
    for (i = 1; i <= 10; i++)
    {
        if (i % 2 == 0) continue;
        sum += i;
    }

    printf("1부터 10까지 홀수의 합은 %d다. \n", sum);
    return 0;
}
지민 : 위 코드는 홀수만 출력하는 코드야.
근언 : 홀수만 출력하는 거니까 짝수를 나타내는 수를 스킵하는
       if (i % 2 == 0) continue; 행이 있는거지?
지민 : 맞아 정확해

#include <stdio.h>

int main(void)
{
    int i;
    int count = 0;
    for (i = 1; i <= 1000; i++)
    {
        if ((i % 2 != 0) || (i % 6 != 0)) continue;
        printf("%d \n", i);
        count++;
        if (count == 10)
            break;
    }

    return 0;
}

지민 : 2의 배수이면서 6의 배수를 출력하는 문제를 풀어보자!
근언 : 1부터 1000까지 반복해야 하니까 for (i = 1; i <= 1000; i++);
i를 1부터 1000까지 반복하는 반복문을 넣었어.
지민 : continue문을 활용해야 하는 문제니까 
if ((i % 2 == 0) && (i % 6 == 0));
이 조건문은 i가 2의 배수이면서 6의 배수인지 확인해야해. i % 2 == 0은 i가 2의 배수인지 확인하고,
i % 6 == 0은 i가 6의 배수인지 확인해야해.
두 조건 모두 참인 경우에 continue가 시작 돼.
continue 문을 사용하여 현재 반복을 중지하고 다음 숫자로 이동할거야.
근언 : 그리고 10개만 출력하고 멈춰야 하니 출력할때마다 count를 하나씩 추가해서 10개가 되면 break가 되게 설정했어.
지민 : 결과값을 확인해보니 이 코드가 맞는거 같아

