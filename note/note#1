note1

 

근언: 시스템 소프트웨어가 무엇이라고 생각해? 우리 한번 같이 찾아보자. 

 

지민: 시스템 소프트웨어란 하드웨어와 응용 소프트웨어 사이를 이어주는 역할을 하며, 다른 소프트웨어들이 구동 및 처리될 수 있는 환경을 만들어주기 때문에 플랫폼 소프트웨어라고도 불려. 혹시 그럼 시스템 소프트웨어의 종류는 어떤 것이 있을까? 

 

근언: 시스템 소프트웨어의 종류는 컴파일러, 어셈블러, 인터프리터, 로더, 링커, 유틸리티, DBMS, 웹서버, 와스 등이 있어. 그 중에 운영체제가 대표적인 예로 불리는데 시스템 소프트웨어와 운영체제의 관계를 설명해줘. 

 

지민: 운영체제는 시스템 소프트웨어의 한 부분으로, 하드웨어의 리소스를 제어, 관리하는 역할을 담당해. 운영체제가 제공하는 하드웨어 제어 및 관리는 범용성을 띠고 있기 때문에, 각 애플리케이션 소프트웨어들의 특성을 반영하지 못해. 그러다 보니 어떤 애플리케이션 소프트웨어는 어셈블리로 직접 하드웨어를 제어하기도 해. 또한, 일반적으로는 운영체제가 제공하는 것 위에서 애플리케이션이 동작하다 보니 운영체제에 애플리케이션 소프트웨어는 종속돼. 운영체제에는 운영체제의 가장 핵심이 되는 부분인 커널이 존재하며, 응용 소프트웨어와 하드웨어를 연결시켜주는 역할을 해.  

프로그래밍 실행 절차가 어떻게 될까? 

 

근언: 먼저 원시 파일을 작성하고, 컴파일러를 통해 목적파일을 생성한 다음에 링커를 통해 실행파일을 생성해. 그런데 혹시 컴파일러는 왜 필요해?  

 

지민: 사람이 쓰는 언어에서 기계어로 번역하는 과정이라고 할 수 있어. 그런데 링커는 왜 필요한 거야? 

 

근언: 링커는 각 모듈의 독립적인 컴파일을 가능하게 해줘. 때문에 소프트웨어 개발에 혁신적인 변화를 가져왔어. 그래서 필요한 거야. 

 

#include <stdio.h> 

 

int main() 

{ 

int a = 20; 

const int b = 3; 

 

printf("정수 a의 초깃값은 %d이다.\n", a); 

printf("상수 b의 초깃값은 %d이다.\n", b); 

 

a = 10; 

b = 4; 

 

printf("a의 값은 %d로 바뀌었다.\n", a); 

printf("b의 값은 %d로 바뀌었다.\n", b); 

return 0; 

} 

 

근언: 오류가 뜨는 이유는 const int b가 상수이기 때문에 숫자를 변경할 수 없어. 따라서, const int b를 상수가 아닌 변수로서 int b로 바꾸면 코드의 오류가 없어질 거야. 

#include <stdio.h> 

 

int main() 

{ 

int a = 20; 

int b = 3; 

 

printf("정수 a의 초깃값은 %d이다.\n", a); 

printf("상수 b의 초깃값은 %d이다.\n", b); 

 

a = 10; 

b = 4; 

 

printf("a의 값은 %d로 바뀌었다.\n", a); 

printf("b의 값은 %d로 바뀌었다.\n", b); 

return 0; 

} 

 

지민: 아니면 기존 ‘상수’의 느낌을 살려서 b를 바꾸는 행을 지우는 것도 좋을 거야. 

#include <stdio.h> 

 

int main() 

{ 

int a = 20; 

const int b = 3; 

 

printf("정수 a의 초깃값은 %d이다.\n", a); 

printf("상수 b의 초깃값은 %d이다.\n", b); 

 

a = 10; 

 

printf("a의 값은 %d로 바뀌었다.\n", a); 

printf("b의 값은 %d로 여전하다.\n", b); 

return 0; 

} 

 
