C프로그래밍 6조 202004186 김근언  202204056  변지민
12주차 11/22 정리노트

//예제 11-3
#include <stdio.h>

struct list
{
	char name;
	char gender;
	int age;
};
int main(void)
{
	struct list st1 = { 'T', 'M', 25 };
	struct list st2, st3 = { 'P', 'F', 30 };

	st2 = st1;
	st3.name = st1.name;
	st3.gender = st1.gender;

	printf("이름 성별 나이\n");
	printf("-----------------------\n");
	printf(" %c %c %d\n", st1.name, st1.gender, st1.age);
	printf(" %c %c %d\n", st2.name, st2.gender, st2.age);
	printf(" %c %c %d\n", st3.name, st3.gender, st3.age);
	return 0;
}

: 결과값을 한 번 예상해보자
: st1 T M 25 / st2 T M 25 / st3 T M 30
  로 나올 것 같아 
: 맞아 실제로 코드를 실행 했을 때에도 같은 값을 얻었어.
: 18 ~ 20 줄 해석이 잘 되었네

//예제 11-7
#include <stdio.h>
#include <math.h>

struct ThreeDime
{
	double x;
	double y;
	double z;
};

typedef struct ThreeDime ThreeDime;

double Distance1(ThreeDime a)
{
	double d;
	d = sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
	return d;
}

double Distance2(ThreeDime a, ThreeDime b)
{
	double d;
	d = sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
	return d;
}

ThreeDime SymOri(ThreeDime a)
{
	a.x = -a.x;
	a.y = -a.y;
	a.z = -a.z;
	return a;
}

int main(void)
{
	double D1, D2;
	ThreeDime A1, A2, A3;

	printf("3차원 점 A1의 x, y, z 좌표를 입력하시오.\n");
	scanf_s("%lf %lf %lf", &A1.x, &A1.y, &A1.z);

	printf("\n3차원 점 A2의 x, y, z 좌표를 입력하시오.\n");
	scanf_s("%lf %lf %lf", &A2.x, &A2.y, &A2.z); 

	D1 = Distance1(A1);

	D2 = Distance2(A1, A2);

	A3 = SymOri(A1);

	printf("\n점 A1과 원점의 거리는 %.2lf이다.\n", D1);
	printf("점 A1과 점 A2의 거리는 %.2lf이다.\n", D2);
	printf("점 A1을 원점에 대칭시킨 점의 x : %.2lf, y : %.2lf, z : %.2lf이다.\n", A3.x, A3.y, A3.z);

	return 0;
}

: 이 코드에 대해서 이야기 해보자
:





